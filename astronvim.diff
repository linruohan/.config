diff --git a/lua/astronvim/bootstrap.lua b/lua/astronvim/bootstrap.lua
index c5a9f47..91c24be 100644
--- a/lua/astronvim/bootstrap.lua
+++ b/lua/astronvim/bootstrap.lua
@@ -16,39 +16,39 @@ astronvim.supported_configs = { astronvim.install.home }
 astronvim.install.config = vim.fn.stdpath("config"):gsub("[^/\\]+$", "astronvim")
 -- check if they are the same, protects against NVIM_APPNAME use for isolated install
 if astronvim.install.home ~= astronvim.install.config then
-  vim.opt.rtp:append(astronvim.install.config)
-  --- supported astronvim user conifg folders
-  table.insert(astronvim.supported_configs, astronvim.install.config)
+    vim.opt.rtp:append(astronvim.install.config)
+    --- supported astronvim user conifg folders
+    table.insert(astronvim.supported_configs, astronvim.install.config)
 end
 
 --- Looks to see if a module path references a lua file in a configuration folder and tries to load it. If there is an error loading the file, write an error and continue
 ---@param module string The module path to try and load
 ---@return table|nil # The loaded module if successful or nil
 local function load_module_file(module)
-  -- placeholder for final return value
-  local found_file = nil
-  -- search through each of the supported configuration locations
-  for _, config_path in ipairs(astronvim.supported_configs) do
-    -- convert the module path to a file path (example user.init -> user/init.lua)
-    local module_path = config_path .. "/lua/" .. module:gsub("%.", "/") .. ".lua"
-    -- check if there is a readable file, if so, set it as found
-    if vim.fn.filereadable(module_path) == 1 then found_file = module_path end
-  end
-  -- if we found a readable lua file, try to load it
-  local out = nil
-  if found_file then
-    -- try to load the file
-    local status_ok, loaded_module = pcall(require, module)
-    -- if successful at loading, set the return variable
-    if status_ok then
-      out = loaded_module
-    -- if unsuccessful, throw an error
-    else
-      vim.api.nvim_err_writeln("Error loading file: " .. found_file .. "\n\n" .. loaded_module)
+    -- placeholder for final return value
+    local found_file = nil
+    -- search through each of the supported configuration locations
+    for _, config_path in ipairs(astronvim.supported_configs) do
+        -- convert the module path to a file path (example user.init -> user/init.lua)
+        local module_path = config_path .. "/lua/" .. module:gsub("%.", "/") .. ".lua"
+        -- check if there is a readable file, if so, set it as found
+        if vim.fn.filereadable(module_path) == 1 then found_file = module_path end
     end
-  end
-  -- return the loaded module or nil if no file found
-  return out
+    -- if we found a readable lua file, try to load it
+    local out = nil
+    if found_file then
+        -- try to load the file
+        local status_ok, loaded_module = pcall(require, module)
+        -- if successful at loading, set the return variable
+        if status_ok then
+            out = loaded_module
+            -- if unsuccessful, throw an error
+        else
+            vim.api.nvim_err_writeln("Error loading file: " .. found_file .. "\n\n" .. loaded_module)
+        end
+    end
+    -- return the loaded module or nil if no file found
+    return out
 end
 
 --- Main configuration engine logic for extending a default configuration table with either a function override or a table to merge into the default option
@@ -57,22 +57,22 @@ end
 -- @param extend boolean value to either extend the default or simply overwrite it if an override is provided
 -- @return the new configuration table
 local function func_or_extend(overrides, default, extend)
-  -- if we want to extend the default with the provided override
-  if extend then
-    -- if the override is a table, use vim.tbl_deep_extend
-    if type(overrides) == "table" then
-      local opts = overrides or {}
-      default = default and vim.tbl_deep_extend("force", default, opts) or opts
-    -- if the override is  a function, call it with the default and overwrite default with the return value
-    elseif type(overrides) == "function" then
-      default = overrides(default)
+    -- if we want to extend the default with the provided override
+    if extend then
+        -- if the override is a table, use vim.tbl_deep_extend
+        if type(overrides) == "table" then
+            local opts = overrides or {}
+            default = default and vim.tbl_deep_extend("force", default, opts) or opts
+            -- if the override is  a function, call it with the default and overwrite default with the return value
+        elseif type(overrides) == "function" then
+            default = overrides(default)
+        end
+        -- if extend is set to false and we have a provided override, simply override the default
+    elseif overrides ~= nil then
+        default = overrides
     end
-  -- if extend is set to false and we have a provided override, simply override the default
-  elseif overrides ~= nil then
-    default = overrides
-  end
-  -- return the modified default table
-  return default
+    -- return the modified default table
+    return default
 end
 
 --- user settings from the base `user/init.lua` file
@@ -82,16 +82,16 @@ local user_settings = load_module_file "user.init"
 -- @param module the module path like string to look up in the user settings table
 -- @return the value of the table entry if exists or nil
 local function user_setting_table(module)
-  -- get the user settings table
-  local settings = user_settings or {}
-  -- iterate over the path string split by '.' to look up the table value
-  for tbl in string.gmatch(module, "([^%.]+)") do
-    settings = settings[tbl]
-    -- if key doesn't exist, keep the nil value and stop searching
-    if settings == nil then break end
-  end
-  -- return the found settings
-  return settings
+    -- get the user settings table
+    local settings = user_settings or {}
+    -- iterate over the path string split by '.' to look up the table value
+    for tbl in string.gmatch(module, "([^%.]+)") do
+        settings = settings[tbl]
+        -- if key doesn't exist, keep the nil value and stop searching
+        if settings == nil then break end
+    end
+    -- return the found settings
+    return settings
 end
 
 --- User configuration entry point to override the default options of a configuration table with a user configuration file or table in the user/init.lua user settings
@@ -100,25 +100,25 @@ end
 ---@param extend? boolean # Whether extend the default settings or overwrite them with the user settings entirely (default: true)
 ---@return any # The new configuration settings with the user overrides applied
 function astronvim.user_opts(module, default, extend)
-  -- default to extend = true
-  if extend == nil then extend = true end
-  -- if no default table is provided set it to an empty table
-  if default == nil then default = {} end
-  -- try to load a module file if it exists
-  local user_module_settings = load_module_file("user." .. module)
-  -- if no user module file is found, try to load an override from the user settings table from user/init.lua
-  if user_module_settings == nil then user_module_settings = user_setting_table(module) end
-  -- if a user override was found call the configuration engine
-  if user_module_settings ~= nil then default = func_or_extend(user_module_settings, default, extend) end
-  -- return the final configuration table with any overrides applied
-  return default
+    -- default to extend = true
+    if extend == nil then extend = true end
+    -- if no default table is provided set it to an empty table
+    if default == nil then default = {} end
+    -- try to load a module file if it exists
+    local user_module_settings = load_module_file("user." .. module)
+    -- if no user module file is found, try to load an override from the user settings table from user/init.lua
+    if user_module_settings == nil then user_module_settings = user_setting_table(module) end
+    -- if a user override was found call the configuration engine
+    if user_module_settings ~= nil then default = func_or_extend(user_module_settings, default, extend) end
+    -- return the final configuration table with any overrides applied
+    return default
 end
 
 --- Updater settings overridden with any user provided configuration
 astronvim.updater = {
-  options = astronvim.user_opts("updater", { remote = "origin", channel = "stable" }),
-  snapshot = { module = "lazy_snapshot", path = vim.fn.stdpath "config" .. "/lua/lazy_snapshot.lua" },
-  rollback_file = vim.fn.stdpath "cache" .. "/astronvim_rollback.lua",
+    options = astronvim.user_opts("updater", { remote = "origin", channel = "stable" }),
+    snapshot = { module = "lazy_snapshot", path = vim.fn.stdpath "config" .. "/lua/lazy_snapshot.lua" },
+    rollback_file = vim.fn.stdpath "cache" .. "/astronvim_rollback.lua",
 }
 local options = astronvim.updater.options
 if astronvim.install.is_stable ~= nil then options.channel = astronvim.install.is_stable and "stable" or "nightly" end
@@ -129,4 +129,5 @@ astronvim.user_terminals = {}
 --- table of language servers to ignore the setup of, configured through lsp.skip_setup in the user configuration
 astronvim.lsp = { skip_setup = astronvim.user_opts("lsp.skip_setup", {}), progress = {} }
 --- the default colorscheme to apply on startup
-astronvim.default_colorscheme = astronvim.user_opts("colorscheme", "astrotheme", false)
+--- astronvim.default_colorscheme = astronvim.user_opts("colorscheme", "astrotheme", false)
+astronvim.default_colorscheme = astronvim.user_opts("colorscheme", "deus", false)
diff --git a/lua/astronvim/options.lua b/lua/astronvim/options.lua
index c17b5ad..0bfcaac 100644
--- a/lua/astronvim/options.lua
+++ b/lua/astronvim/options.lua
@@ -1,66 +1,66 @@
-vim.opt.viewoptions:remove "curdir" -- disable saving current directory with views
+vim.opt.viewoptions:remove "curdir"             -- disable saving current directory with views
 vim.opt.shortmess:append { s = true, I = true } -- disable startup message
-vim.opt.backspace:append { "nostop" } -- Don't stop backspace at insert
+vim.opt.backspace:append { "nostop" }           -- Don't stop backspace at insert
 if vim.fn.has "nvim-0.9" == 1 then
-  vim.opt.diffopt:append "linematch:60" -- enable linematch diff algorithm
+  vim.opt.diffopt:append "linematch:60"         -- enable linematch diff algorithm
 end
 local options = astronvim.user_opts("options", {
   opt = {
-    breakindent = true, -- Wrap indent to match  line start
-    clipboard = "unnamedplus", -- Connection to the system clipboard
-    cmdheight = 0, -- hide command line unless needed
-    completeopt = { "menu", "menuone", "noselect" }, -- Options for insert mode completion
-    copyindent = true, -- Copy the previous indentation on autoindenting
-    cursorline = true, -- Highlight the text line of the cursor
-    expandtab = true, -- Enable the use of space in tab
-    fileencoding = "utf-8", -- File content encoding for the buffer
-    fillchars = { eob = " " }, -- Disable `~` on nonexistent lines
-    foldenable = true, -- enable fold for nvim-ufo
-    foldlevel = 99, -- set high foldlevel for nvim-ufo
-    foldlevelstart = 99, -- start with all code unfolded
+    breakindent = true,                                     -- Wrap indent to match  line start
+    clipboard = "unnamedplus",                              -- Connection to the system clipboard
+    cmdheight = 0,                                          -- hide command line unless needed
+    completeopt = { "menu", "menuone", "noselect" },        -- Options for insert mode completion
+    copyindent = true,                                      -- Copy the previous indentation on autoindenting
+    cursorline = true,                                      -- Highlight the text line of the cursor
+    expandtab = true,                                       -- Enable the use of space in tab
+    fileencoding = "utf-8",                                 -- File content encoding for the buffer
+    fillchars = { eob = " " },                              -- Disable `~` on nonexistent lines
+    foldenable = true,                                      -- enable fold for nvim-ufo
+    foldlevel = 99,                                         -- set high foldlevel for nvim-ufo
+    foldlevelstart = 99,                                    -- start with all code unfolded
     foldcolumn = vim.fn.has "nvim-0.9" == 1 and "1" or nil, -- show foldcolumn in nvim 0.9
-    history = 100, -- Number of commands to remember in a history table
-    ignorecase = true, -- Case insensitive searching
-    infercase = true, -- Infer cases in keyword completion
-    laststatus = 3, -- globalstatus
-    linebreak = true, -- Wrap lines at 'breakat'
-    mouse = "a", -- Enable mouse support
-    number = true, -- Show numberline
-    preserveindent = true, -- Preserve indent structure as much as possible
-    pumheight = 10, -- Height of the pop up menu
-    relativenumber = true, -- Show relative numberline
-    scrolloff = 8, -- Number of lines to keep above and below the cursor
-    shiftwidth = 2, -- Number of space inserted for indentation
-    showmode = false, -- Disable showing modes in command line
-    showtabline = 2, -- always display tabline
-    sidescrolloff = 8, -- Number of columns to keep at the sides of the cursor
-    signcolumn = "yes", -- Always show the sign column
-    smartcase = true, -- Case sensitivie searching
-    smartindent = true, -- Smarter autoindentation
-    splitbelow = true, -- Splitting a new window below the current one
-    splitright = true, -- Splitting a new window at the right of the current one
-    tabstop = 2, -- Number of space in a tab
-    termguicolors = true, -- Enable 24-bit RGB color in the TUI
-    timeoutlen = 500, -- Shorten key timeout length a little bit for which-key
-    undofile = true, -- Enable persistent undo
-    updatetime = 300, -- Length of time to wait before triggering the plugin
-    virtualedit = "block", -- allow going past end of line in visual block mode
-    wrap = false, -- Disable wrapping of lines longer than the width of window
-    writebackup = false, -- Disable making a backup before overwriting a file
+    history = 100,                                          -- Number of commands to remember in a history table
+    ignorecase = true,                                      -- Case insensitive searching
+    infercase = true,                                       -- Infer cases in keyword completion
+    laststatus = 3,                                         -- globalstatus
+    linebreak = true,                                       -- Wrap lines at 'breakat'
+    mouse = "a",                                            -- Enable mouse support
+    number = true,                                          -- Show numberline
+    preserveindent = true,                                  -- Preserve indent structure as much as possible
+    pumheight = 10,                                         -- Height of the pop up menu
+    relativenumber = false,                                 -- Show relative numberline
+    scrolloff = 8,                                          -- Number of lines to keep above and below the cursor
+    shiftwidth = 4,                                         -- Number of space inserted for indentation
+    showmode = false,                                       -- Disable showing modes in command line
+    showtabline = 4,                                        -- always display tabline
+    sidescrolloff = 8,                                      -- Number of columns to keep at the sides of the cursor
+    signcolumn = "yes",                                     -- Always show the sign column
+    smartcase = true,                                       -- Case sensitivie searching
+    smartindent = true,                                     -- Smarter autoindentation
+    splitbelow = true,                                      -- Splitting a new window below the current one
+    splitright = true,                                      -- Splitting a new window at the right of the current one
+    tabstop = 4,                                            -- Number of space in a tab
+    termguicolors = true,                                   -- Enable 24-bit RGB color in the TUI
+    timeoutlen = 500,                                       -- Shorten key timeout length a little bit for which-key
+    undofile = true,                                        -- Enable persistent undo
+    updatetime = 300,                                       -- Length of time to wait before triggering the plugin
+    virtualedit = "block",                                  -- allow going past end of line in visual block mode
+    wrap = true,                                            -- Disable wrapping of lines longer than the width of window
+    writebackup = false,                                    -- Disable making a backup before overwriting a file
   },
   g = {
-    mapleader = " ", -- set leader key
-    maplocalleader = ",", -- set default local leader key
+    mapleader = " ",                                                    -- set leader key
+    maplocalleader = ",",                                               -- set default local leader key
     -- AstroNvim specific global options
-    autoformat_enabled = true, -- enable or disable auto formatting at start (lsp.formatting.format_on_save must be enabled)
-    autopairs_enabled = true, -- enable autopairs at start
-    cmp_enabled = true, -- enable completion at start
-    codelens_enabled = true, -- enable or disable automatic codelens refreshing for lsp that support it
-    diagnostics_mode = 3, -- set the visibility of diagnostics in the UI (0=off, 1=only show in status line, 2=virtual text off, 3=all on)
-    highlighturl_enabled = true, -- highlight URLs by default
-    icons_enabled = true, -- disable icons in the UI (disable if no nerd font is available)
-    lsp_handlers_enabled = true, -- enable or disable default vim.lsp.handlers (hover and signatureHelp)
-    ui_notifications_enabled = true, -- disable notifications when toggling UI elements
+    autoformat_enabled = true,                                          -- enable or disable auto formatting at start (lsp.formatting.format_on_save must be enabled)
+    autopairs_enabled = true,                                           -- enable autopairs at start
+    cmp_enabled = true,                                                 -- enable completion at start
+    codelens_enabled = true,                                            -- enable or disable automatic codelens refreshing for lsp that support it
+    diagnostics_mode = 3,                                               -- set the visibility of diagnostics in the UI (0=off, 1=only show in status line, 2=virtual text off, 3=all on)
+    highlighturl_enabled = true,                                        -- highlight URLs by default
+    icons_enabled = true,                                               -- disable icons in the UI (disable if no nerd font is available)
+    lsp_handlers_enabled = true,                                        -- enable or disable default vim.lsp.handlers (hover and signatureHelp)
+    ui_notifications_enabled = true,                                    -- disable notifications when toggling UI elements
   },
   t = vim.t.bufs and vim.t.bufs or { bufs = vim.api.nvim_list_bufs() }, -- initialize buffers for the current tab
 })
